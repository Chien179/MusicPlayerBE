// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: songs.sql

package db

import (
	"context"
	"time"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (
  name,
  singer,
  image,
  file_url,
  duration
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, singer, image, file_url, duration, created_at
`

type CreateSongParams struct {
	Name     string    `json:"name"`
	Singer   string    `json:"singer"`
	Image    string    `json:"image"`
	FileUrl  string    `json:"file_url"`
	Duration time.Time `json:"duration"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.Name,
		arg.Singer,
		arg.Image,
		arg.FileUrl,
		arg.Duration,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Singer,
		&i.Image,
		&i.FileUrl,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs
WHERE id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSong, id)
	return err
}

const getSong = `-- name: GetSong :one
SELECT id, name, singer, image, file_url, duration, created_at FROM songs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSong(ctx context.Context, id int64) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSong, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Singer,
		&i.Image,
		&i.FileUrl,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const listSongs = `-- name: ListSongs :many
SELECT id, name, singer, image, file_url, duration, created_at FROM songs
ORDER BY id
`

func (q *Queries) ListSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, listSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Singer,
			&i.Image,
			&i.FileUrl,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :one
UPDATE songs
SET name = $2,
    singer = $3,
    image = $4,
    file_url = $5,
    duration = $6
WHERE id = $1
RETURNING id, name, singer, image, file_url, duration, created_at
`

type UpdateSongParams struct {
	ID       int64     `json:"id"`
	Name     string    `json:"name"`
	Singer   string    `json:"singer"`
	Image    string    `json:"image"`
	FileUrl  string    `json:"file_url"`
	Duration time.Time `json:"duration"`
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, updateSong,
		arg.ID,
		arg.Name,
		arg.Singer,
		arg.Image,
		arg.FileUrl,
		arg.Duration,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Singer,
		&i.Image,
		&i.FileUrl,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}
