// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: playlists_songs.sql

package db

import (
	"context"
)

const createPlaylistSong = `-- name: CreatePlaylistSong :one
INSERT INTO playlists_songs (
  playlists_id,
  songs_id
) VALUES (
  $1, $2
)
RETURNING id, songs_id, playlists_id
`

type CreatePlaylistSongParams struct {
	PlaylistsID int64 `json:"playlists_id"`
	SongsID     int64 `json:"songs_id"`
}

func (q *Queries) CreatePlaylistSong(ctx context.Context, arg CreatePlaylistSongParams) (PlaylistsSong, error) {
	row := q.db.QueryRowContext(ctx, createPlaylistSong, arg.PlaylistsID, arg.SongsID)
	var i PlaylistsSong
	err := row.Scan(&i.ID, &i.SongsID, &i.PlaylistsID)
	return i, err
}

const deletePlaylistSong = `-- name: DeletePlaylistSong :exec
DELETE FROM playlists_songs
WHERE id = $1
`

func (q *Queries) DeletePlaylistSong(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistSong, id)
	return err
}

const getPlaylistSong = `-- name: GetPlaylistSong :one
SELECT id, songs_id, playlists_id FROM playlists_songs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylistSong(ctx context.Context, id int64) (PlaylistsSong, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistSong, id)
	var i PlaylistsSong
	err := row.Scan(&i.ID, &i.SongsID, &i.PlaylistsID)
	return i, err
}

const listPlaylistsSongs = `-- name: ListPlaylistsSongs :many
SELECT id, songs_id, playlists_id FROM playlists_songs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPlaylistsSongsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylistsSongs(ctx context.Context, arg ListPlaylistsSongsParams) ([]PlaylistsSong, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylistsSongs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlaylistsSong{}
	for rows.Next() {
		var i PlaylistsSong
		if err := rows.Scan(&i.ID, &i.SongsID, &i.PlaylistsID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
