package db

import (
	"context"
	"database/sql"
	"fmt"
)

// Store provide all functions to execute SQL queries and transactions
type Store interface {
	// Querier is an interface generated by sqlc to define all function signatures of Queries struct
	Querier
	CreateSongTx(ctx context.Context, arg CreateSongTxParams) (Song, error)
}

// SQLStore provide all functions to execute SQL queries and transactions
type SQLStore struct {
	*Queries
	db *sql.DB
}

// NewStore creates a new store
func NewStore(db *sql.DB) Store {
	return &SQLStore{
		db:      db,
		Queries: New(db),
	}
}

// execTx execute function within a database transaction - lowerCase first
// mean we dont want external package to call it directly
func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error {
	tx, err := store.db.BeginTx(ctx, nil)

	if err != nil {
		return err
	}

	q := New(tx)
	err = fn(q)

	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil {
			return fmt.Errorf("tx err: %v, rb err: %v", err, rbErr)
		}

		return err
	}

	return tx.Commit()
}

type CreateSongTxParams struct {
	Name     string
	Singer   string
	Image    string
	FileUrl  string
	Duration int64
	Genres   []int64
}

func (store *SQLStore) CreateSongTx(ctx context.Context, arg CreateSongTxParams) (Song, error) {
	var song Song

	err := store.execTx(ctx, func(q *Queries) error {
		res, err := q.CreateSong(ctx, CreateSongParams{
			Name:     arg.Name,
			Image:    arg.Image,
			Singer:   arg.Singer,
			FileUrl:  arg.FileUrl,
			Duration: arg.Duration,
		})

		if err != nil {
			return err
		}

		song.ID = res.ID
		song.Name = res.Name
		song.Singer = res.Singer
		song.FileUrl = res.FileUrl
		song.Image = res.Image
		song.Duration = res.Duration
		song.CreatedAt = res.CreatedAt

		for i := 0; i < len(arg.Genres); i++ {
			genre, err := q.GetGenre(ctx, arg.Genres[i])

			if err != nil {
				return err
			}

			_, err = q.CreateSongGenre(ctx, CreateSongGenreParams{
				SongsID:  res.ID,
				GenresID: genre.ID,
			})

			if err != nil {
				return err
			}
		}

		return nil
	})

	return song, err
}
